{
  "name": "ServiceNow AI Helper",
  "nodes": [
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.type }}",
                    "rightValue": "recommendation",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "9944eee4-fb8d-4789-ae58-21f140280568"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "recommendation"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a0783dc7-3447-46d1-8b2d-eab4d0380856",
                    "leftValue": "={{ $json.type }}",
                    "rightValue": "documentation",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "documentation"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "792ea6eb-9469-4997-bf56-31cae02c2b98",
                    "leftValue": "={{ $json.type }}",
                    "rightValue": "script",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "script"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6c33437c-18de-4c89-8540-2552d0709698",
                    "leftValue": "={{ $json.type }}",
                    "rightValue": "troubleshoot",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "troubleshoot"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra",
          "renameFallbackOutput": "Invalid"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1296,
        224
      ],
      "id": "09ec8fd2-e319-47c3-a7f4-1fc79e4b425f",
      "name": "Switch",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0fa670a1-4f6b-4ad2-9073-52137bfea731",
              "name": "prompt",
              "value": "={{ $json.prompt }}\n\n## Recommendation Mode\nProvide expert consulting guidance as if discussing with a client's leadership team.\n\n### Response Framework\n1. **Executive Summary** (2-3 sentences)\n   - Core recommendation with business impact\n   - Why this approach over alternatives\n\n2. **Solution Architecture**\n   - Technical approach aligned to ServiceNow best practices\n   - Key platform components and their interactions\n   - Integration points and dependencies\n\n3. **Implementation Roadmap**\n   - Phase 1: Quick wins (1-2 weeks)\n   - Phase 2: Core functionality (2-4 weeks)\n   - Phase 3: Optimization & scale (ongoing)\n\n4. **Critical Success Factors**\n   - Required configurations/customizations\n   - Resource requirements (roles, skills, time)\n   - Risk mitigation strategies\n   - Success metrics and KPIs\n\n### Consultant Priorities\n- **Business Value First**: Lead with outcomes, not features\n- **Practical Phasing**: Deliver value incrementally\n- **Future-Proofing**: Consider upgrade impacts and scalability\n- **Change Management**: Address adoption challenges upfront\n- **Alternative Approaches**: Briefly note why recommended approach beats alternatives\n\n### Coverage Areas\nPlatform Design | Process Optimization | User Experience | Integration Strategy | Security Model | Performance Tuning | Governance | ROI Justification\n\nFocus: Actionable recommendations with clear next steps. Avoid theoretical discussions.",
              "type": "string"
            },
            {
              "id": "8020e7be-bcb5-4e9e-874c-e61d3683a5b2",
              "name": "temperature",
              "value": 0.3,
              "type": "number"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1072,
        -112
      ],
      "id": "27932454-26e6-4410-b106-2a98232e5d72",
      "name": "Append Recommendation"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d4eaade8-28f5-4f5e-8226-04acdd6d84fd",
              "name": "prompt",
              "value": "={{ $json.prompt }}\n\n## Documentation Mode\nProvide authoritative guidance backed by official ServiceNow documentation.\n\n### Response Framework\n1. **Concept Summary** (2-3 sentences)\n   - What it is and primary use case\n   - Which ServiceNow module/capability it belongs to\n\n2. **Documentation Hierarchy**\n   - **Primary Reference**: Main product doc for this topic\n   - **Prerequisites**: Docs to read first (if applicable)\n   - **Deep Dives**: Advanced documentation for specific aspects\n   - **Examples**: Implementation guides or use cases\n\n3. **Learning Path**\nBeginner → [Doc 1: Basics] → [Doc 2: Configuration] → [Doc 3: Best Practices]\nAdvanced → [Doc 4: Architecture] → [Doc 5: Optimization]\n\n4. **Quick Reference**\n- API/Class references (if applicable)\n- Property/System settings\n- Related KB articles for common issues\n\n### Documentation Integration\nWhen referencing injected documentation:\n- Quote specific sections when critical\n- Highlight version-specific information\n- Note if docs apply to specific ServiceNow releases\n- Flag any deprecated approaches in older docs\n\n### Source Priority\n1. **Official Docs** (docs.servicenow.com) - Always primary\n2. **Knowledge Base** - For troubleshooting and edge cases\n3. **Community** - Only when official docs lack detail\n4. **Now Learning** - For structured learning paths\n\nFocus: Guide users through documentation efficiently. Assume docs are available via RAG - reference them naturally.",
              "type": "string"
            },
            {
              "id": "55c4e90c-d672-433a-864e-84ef644fcc69",
              "name": "temperature",
              "value": 0.1,
              "type": "number"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1072,
        80
      ],
      "id": "83ab5e71-f070-4f55-a126-958b849d7051",
      "name": "Append Documentation"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "36e3620f-39bc-41ea-a156-4aff6297a0bf",
              "name": "=prompt",
              "value": "={{ $json.prompt }}\n\n\n# ServiceNow Script Mode\n\nProvide a single, complete ServiceNow script solution that follows official ServiceNow technical best practices and solves the specific problem efficiently.\n\n## Response Framework\n\n### 1. Solution Summary (2-3 sentences)\n- What the script accomplishes and why this approach is optimal\n- Brief justification based on ServiceNow best practices\n\n### 2. The Script (ONE primary solution)\n```javascript\n// Production-ready code following ServiceNow standards\n// Meaningful comments only for complex business logic\n// Descriptive variable names and proper function structure\n```\n\n### 3. Implementation Guide\n- **Where**: Exact location (e.g., Business Rule on incident table, Client Script onChange)\n- **When**: Trigger conditions (e.g., before insert, async, onLoad with isLoading check)\n- **Setup**: Required properties, roles, or dependencies\n\n### 4. Critical Considerations\n- Performance impact and optimization notes\n- Error handling and validation approach\n- Testing checklist (2-3 essential tests)\n\n## Script Selection Rules\n- **ONE Script First**: Solve with a single script whenever possible\n- **Second Script Only If**: Client + Server interaction required, or truly separate concerns\n- **Never**: Multiple variations of the same solution\n- **Always**: The simplest, most maintainable approach that meets requirements\n\n## Code Quality Standards (Per ServiceNow Best Practices)\n\n### Core Standards\n- Use ServiceNow APIs only (GlideRecord, GlideAggregate, GlideAjax)\n- Descriptive variable and function names (avoid single letters except loop counters)\n- Enclose all code in functions to prevent global variable conflicts\n- Store function results in variables to avoid repeated API calls\n- Verify values exist before using them (null/undefined checks)\n\n### Performance & Database\n- Use GlideAggregate for counting records (not getRowCount())\n- Leverage setLimit() for existence checks\n- Use addEncodedQuery() for complex queries\n- Avoid dot-walking to sys_id of reference fields\n- Let the database do the work (proper querying vs. client-side filtering)\n\n### Client-Side Specific\n- Use proper onChange parameter checks (isLoading, newValue, oldValue)\n- Minimize server lookups with g_scratchpad or efficient GlideAjax\n- Include displayValue parameter when using setValue() on reference fields\n- Avoid global client scripts and DOM manipulation\n- Enclose code in functions to prevent variable scope conflicts\n\n### Business Rules Specific\n- Use conditions in Business Rules to control execution\n- Choose correct timing (before/after/async) based on use case\n- Avoid current.update() in Business Rules (prevents recursion)\n- Use setWorkflow(false) only when absolutely necessary\n\n### Security & Maintainability\n- Avoid hard-coded sys_ids, use properties or lookups instead\n- Use gs.getProperty() for configurable values\n- Implement proper error handling and return values\n- Scope-aware implementation (respect application boundaries)\n- Use self-executing functions for single-context scripts\n\n### Debugging & Production\n- Control debug output with system properties\n- Use gs.debug() and gs.info() (available in scoped apps)\n- Avoid gs.log() and alert() statements in production code\n- Include meaningful error messages and validation\n\n## Focus\nDeliver one excellent, production-ready solution following ServiceNow's official technical standards. Prioritize code quality, performance, and maintainability over multiple options.",
              "type": "string"
            },
            {
              "id": "96ed3d9a-1fba-48fc-a77f-515dc9f0d121",
              "name": "max_tokens",
              "value": 3000,
              "type": "number"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1072,
        272
      ],
      "id": "4dc2ca87-7745-4af2-ad72-05ff08364f26",
      "name": "Append Script"
    },
    {
      "parameters": {
        "action": "generate",
        "dataPropertyName": "key"
      },
      "type": "n8n-nodes-base.crypto",
      "typeVersion": 1,
      "position": [
        -848,
        176
      ],
      "id": "da40476e-7a92-4420-8f87-5f7eb47ad377",
      "name": "Generate Key"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0dad757f-358a-4f52-8990-1103696b3f5c",
              "name": "prompt",
              "value": "You are a ServiceNow expert providing concise, actionable guidance that prioritizes brevity while maintaining clarity and technical accuracy.\n\n## Core Principles\n- **Out-of-Box First**: Prioritize native functionality over customization\n- **Best Practices**: Follow ServiceNow's documented standards strictly\n- **Upgrade Safety**: Ensure recommendations survive platform updates\n- **Performance Focus**: Consider scalability and maintainability\n\n## Interaction Guidelines\n- **Clarification First**: If requirements are ambiguous, ask ONE specific question\n- **Assumptions**: State any assumptions made clearly\n- **Iterative Refinement**: Build upon previous responses in continued sessions\n- **Follow-up Format**: \"To provide the best solution, could you clarify: [specific question]?\"\n\n## Knowledge Integration Rules\n- **Never Reference Context**: Do not mention \"search context\", \"provided documentation\", \"available results\", or any reference to how information was obtained\n- **Seamless Integration**: Present all information as direct knowledge without attribution to sources\n- **Natural Response**: Write as if you inherently know the information\n- **Missing Information**: If specific details aren't available, simply state what you know without explaining why you don't know more\n\n### Examples:\nWRONG: \"Based on the search context provided, ServiceBridge is not explicitly detailed...\"\nRIGHT: \"ServiceBridge is a ServiceNow integration component that...\"\n\nWRONG: \"The documentation results don't mention this feature...\"\nRIGHT: \"This feature works by...\" or \"To implement this, you'll need to...\"\n\nWRONG: \"According to the provided context...\"\nRIGHT: [Direct answer without mentioning context]\n\n### When Information is Limited:\n- Provide what you know directly\n- Suggest related concepts if helpful\n- Never apologize for or explain gaps in provided content\n- Focus on actionable guidance with available information\n\nExamples of when to ask:\n- Multiple valid interpretations exist\n- Critical details missing (table names, field names, timing)\n- Performance requirements unclear for large data operations\n\n## Response Format\n1. **Direct Answer First** - Lead with the solution\n2. **Brief Explanation** - \"Why\" in 1-2 sentences maximum\n3. **Implementation Steps** - Only if essential\n4. **Best Practice Note** - When redirecting from poor approaches\n\n## Markdown Requirements\n- Headers: #, ##, ### for clear hierarchy\n- **Bold** for key terms and emphasis\n- Code blocks: ```javascript\n- Lists: Use - or * consistently\n- **Spacing**: Double newlines between ALL sections, before/after code blocks\n\n## Best Practice Redirection\nWhen redirecting from poor approaches:\n\"ServiceNow best practice is [solution] because [brief reason]. This ensures [key benefit].\"\n\n## Expertise Coverage\nPlatform Architecture, Development, Workflow/Automation, Integration, Security, Performance, ITSM/ITOM/HR/CSM, Upgrades, ALM\n\n## Response Guidelines\n- Be comprehensive but concise\n- Quality over quantity\n- Target: 200-300 words unless complexity requires more\n- Always use proper Markdown formatting with clear visual structure\n\n## Tone\n- Authoritative but approachable\n- Implementation-focused\n- Educational but concise\n\n## Tools\n- Use the ServiceNow Knowledge Agent to search the knowledge base in ServiceNow for relevant knowledge articles.\n- Use the Knowledge Store to search for previous answers that the user marked as helpful and added to the knowledge store.\n- Use the Think tool to analyze ServiceNow requirements and plan solutions.\n\nIMPORTANT:\n- If you are giving code examples with GlideRecord objects, never name the variables gr. Name the variable something with a relation to the table being used, for instance grIncident for incidents.\n\nMANDATORY: Never reference how you obtained information. Never use phrases like \"based on\", \"according to\", \"search context\", \"provided documentation\", or similar. Respond with direct knowledge only.",
              "type": "string"
            },
            {
              "id": "772b4d4a-7147-400f-afcf-fa0651725313",
              "name": "model",
              "value": "",
              "type": "string"
            },
            {
              "id": "e10f1016-2e47-4ce6-8d36-1457d4249ee0",
              "name": "key",
              "value": "",
              "type": "string"
            },
            {
              "id": "71a817a0-5151-45d6-8431-70aa2022bee6",
              "name": "type",
              "value": "={{ $json.body.metadata.type }}",
              "type": "string"
            },
            {
              "id": "fce1ff07-c2a3-46b2-b36d-81193926bc68",
              "name": "expert",
              "value": "={{ $json.body.metadata.expert }}",
              "type": "boolean"
            },
            {
              "id": "d4af9534-d7cd-4a3a-821f-c8caa7c2215f",
              "name": "enable_thinking",
              "value": false,
              "type": "boolean"
            },
            {
              "id": "43151627-1d9b-40b4-855d-69cfe30289e3",
              "name": "max_tokens",
              "value": 2500,
              "type": "number"
            },
            {
              "id": "43500782-d374-4687-a59e-7bf79b59dbad",
              "name": "top_p",
              "value": 0.9,
              "type": "number"
            },
            {
              "id": "9e960197-3ff2-4065-8b57-d87726905bba",
              "name": "top_k",
              "value": 40,
              "type": "number"
            },
            {
              "id": "b77f5b04-5dc2-43f8-a0e2-e5f9ec2c4cba",
              "name": "temperature",
              "value": 0.2,
              "type": "number"
            }
          ]
        },
        "options": {
          "dotNotation": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1520,
        272
      ],
      "id": "54fa869f-fb54-4888-952d-62d9e92b69af",
      "name": "Set Basic Variables"
    },
    {
      "parameters": {
        "content": "## Intiate",
        "height": 992,
        "width": 2100
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2240,
        -160
      ],
      "id": "5a1cea5f-9ced-4b25-a994-30011682602c",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "ServiceNowSupportTool",
          "mode": "list",
          "cachedResultName": "ServiceNowSupportTool"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "key": "={{  $('Generate Key').item.json.key }}",
            "state": "processing",
            "prompt": "={{ $json.prompt }}",
            "model": "={{ $json.model }}",
            "question": "={{ $('Initiate').item.json.body.chatInput }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "key",
              "displayName": "key",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "response",
              "displayName": "response",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "state",
              "displayName": "state",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "prompt",
              "displayName": "prompt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "model",
              "displayName": "model",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "question",
              "displayName": "question",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -624,
        176
      ],
      "id": "1c645eb3-72ae-4cd9-acd5-432d01d26ab2",
      "name": "Create Work Record",
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "36e3620f-39bc-41ea-a156-4aff6297a0bf",
              "name": "=prompt",
              "value": "={{ $json.prompt }}\n\n## Troubleshooting Mode\nSystematically diagnose and resolve ServiceNow issues using platform-native tools and methods.\n\n### Diagnostic Framework\n1. **Issue Classification**\n   - **Symptoms**: What's happening vs. expected behavior\n   - **Scope**: Single user/record vs. system-wide\n   - **Timing**: When it started (after upgrade? config change?)\n   - **Severity**: Production down vs. minor inconvenience\n\n2. **Root Cause Analysis**\nStep 1: Check System Logs (filter by time/user/transaction)\nStep 2: Review Debug Output (session debug, SQL logs)\nStep 3: Validate Configuration (compare to baseline/OOB)\nStep 4: Test in Isolation (impersonate user, test instance)\n\n3. **Solution Path**\n- **Immediate Fix**: Workaround to restore service\n- **Root Fix**: Permanent solution addressing cause\n- **Implementation**: Specific steps with rollback plan\n\n4. **Verification & Prevention**\n- **Test**: Specific scenarios to confirm resolution\n- **Monitor**: What to watch for next 24-48 hours\n- **Prevent**: Configuration/process changes to avoid recurrence\n\n### ServiceNow Diagnostic Tools\n- **System Diagnostics**: Debug modules, performance analytics\n- **Session Debugging**: Enable for specific user/transaction\n- **Flow Debugger**: For workflow/flow designer issues\n- **Script Debugger**: For business rule/script include problems\n- **Update Set Preview**: For deployment-related issues\n- **Instance Scan**: For best practice violations\n\n### Escalation Triggers\nIf these occur, recommend ServiceNow support:\n- Production data corruption\n- Platform-level errors (Java stack traces)\n- Upgrade rollback scenarios\n- Security breaches\n\nFocus: Methodical diagnosis before solution. Use ServiceNow's native tools. Document findings for knowledge base.",
              "type": "string"
            },
            {
              "id": "d2294647-4c10-4729-869a-040f627f5c86",
              "name": "temperature",
              "value": 0.3,
              "type": "number"
            },
            {
              "id": "03f86893-67c9-4fc7-b5a1-e37aad107aff",
              "name": "enable_thinking",
              "value": true,
              "type": "boolean"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1072,
        464
      ],
      "id": "5f052f68-ce1a-4299-8c2d-1d59a1d32520",
      "name": "Append Troubleshoot"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "snhelper-add-qa-pair",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1920,
        1008
      ],
      "id": "a088a616-cb2b-4622-ac22-8f26ce038216",
      "name": "Add QA Pair Webhook",
      "webhookId": "add-qa-pair-webhook-id",
      "credentials": {
        "httpHeaderAuth": {
          "id": "HEADER_AUTH_CREDENTIAL_ID",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "extract-data",
              "name": "question",
              "value": "={{ $json.body.question }}",
              "type": "string"
            },
            {
              "id": "extract-answer",
              "name": "answer",
              "value": "={{ $json.body.answer }}",
              "type": "string"
            },
            {
              "id": "extract-category",
              "name": "category",
              "value": "={{ $json.body.category || 'general' }}",
              "type": "string"
            },
            {
              "id": "extract-tags",
              "name": "tags",
              "value": "={{ $json.body.tags || [] }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1696,
        1008
      ],
      "id": "683a2fa2-723f-4c7e-9c8f-e757739ba640",
      "name": "Extract QA Data"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "text-embedding-3-small"
            },
            {
              "name": "input",
              "value": "={{ $json.question }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1472,
        1008
      ],
      "id": "fec009ff-c339-4d62-8e49-ce266ebe4ab6",
      "name": "Generate Question Embedding",
      "credentials": {
        "openAiApi": {
          "id": "OPENAI_CREDENTIAL_ID",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "text-embedding-3-small"
            },
            {
              "name": "input",
              "value": "={{ $('Extract QA Data').item.json.answer }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1248,
        1008
      ],
      "id": "6cc0b908-fbdf-43ba-bfc1-b8e15b0108f4",
      "name": "Generate Answer Embedding",
      "credentials": {
        "openAiApi": {
          "id": "OPENAI_CREDENTIAL_ID",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "combine-embeddings",
              "name": "question_embedding",
              "value": "={{ $('Generate Question Embedding').item.json.data[0].embedding }}",
              "type": "array"
            },
            {
              "id": "combine-answer-embedding",
              "name": "answer_embedding",
              "value": "={{ $('Generate Answer Embedding').item.json.data[0].embedding }}",
              "type": "array"
            },
            {
              "id": "combine-question",
              "name": "question",
              "value": "={{ $('Extract QA Data').item.json.question }}",
              "type": "string"
            },
            {
              "id": "combine-answer",
              "name": "answer",
              "value": "={{ $('Extract QA Data').item.json.answer }}",
              "type": "string"
            },
            {
              "id": "combine-category",
              "name": "category",
              "value": "={{ $('Extract QA Data').item.json.category }}",
              "type": "string"
            },
            {
              "id": "combine-tags",
              "name": "tags",
              "value": "={{ $('Extract QA Data').item.json.tags }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1024,
        1008
      ],
      "id": "b3b54a3c-a39a-4361-85ee-f6c3b949ee5b",
      "name": "Combine Data"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "qa_knowledge_base",
          "mode": "list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "question": "={{ $json.question }}",
            "answer": "={{ $json.answer }}",
            "question_embedding": "={{ JSON.stringify($json.question_embedding) }}",
            "answer_embedding": "={{ JSON.stringify($json.answer_embedding) }}",
            "category": "={{ $json.category }}",
            "tags": "={{ JSON.stringify($json.tags) }}"
          },
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "question",
              "displayName": "question",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "answer",
              "displayName": "answer",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "question_embedding",
              "displayName": "question_embedding",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "answer_embedding",
              "displayName": "answer_embedding",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "category",
              "displayName": "category",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "tags",
              "displayName": "tags",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -800,
        1008
      ],
      "id": "5979ae2b-10db-4fa8-9eb8-8a63362f1215",
      "name": "Save to Database",
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Embeddings",
        "height": 308,
        "width": 1980,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2192,
        912
      ],
      "typeVersion": 1,
      "id": "b5495b8f-b536-403d-b411-d61f728fb429",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": true,\n  \"message\": \"QA pair saved successfully\",\n  \"id\": {{ $json.id }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -576,
        1008
      ],
      "id": "db7f8714-d63f-48fb-9097-90438e1ea07d",
      "name": "Success embedding response"
    },
    {
      "parameters": {
        "content": "## Async Processing",
        "height": 1152,
        "width": 3580,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -48,
        -144
      ],
      "id": "bfa44491-6ffa-417c-ab2d-fa61d9ff604b",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "ServiceNowSupportTool",
          "mode": "list",
          "cachedResultName": "ServiceNowSupportTool"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "key": "={{  $('Generate Key').item.json.key }}",
            "response": "={{ $json.output }}",
            "state": "done"
          },
          "matchingColumns": [
            "key"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "key",
              "displayName": "key",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "response",
              "displayName": "response",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "state",
              "displayName": "state",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "prompt",
              "displayName": "prompt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "model",
              "displayName": "model",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3344,
        256
      ],
      "id": "ed28b49d-6fd6-4266-a225-fa5d4a7c31aa",
      "name": "Save response",
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "gpt-4o-mini"
            },
            {
              "name": "messages",
              "value": "={{ [\n  {\n    \"role\": \"system\",\n    \"content\": \"You are a ServiceNow search query optimizer. Transform user questions into effective ServiceNow search terms by:\\n\\n1. Extract key ServiceNow concepts, features, modules, and terminology\\n2. Add relevant ServiceNow-specific keywords\\n3. Include common synonyms and technical terms\\n4. Focus on searchable terms that would appear in documentation\\n5. Remove conversational words and focus on technical content\\n\\nExamples:\\n- 'How do I create a user?' → 'ServiceNow create user account sys_user table administration'\\n- 'Business rule vs workflow' → 'ServiceNow business rule workflow comparison scripting automation'\\n- 'ACL vs query business rule' → 'ServiceNow ACL access control list query business rule security permissions'\\n\\nReturn ONLY the optimized search query, nothing else. Keep it to 3 to 4 words or terms maximum. Do not include the word ServiceNow.\"\n  },\n  {\n    \"role\": \"user\",\n    \"content\": \"Question type: \" + $('InitiateOld').first().json.body.type + \"\\nUser question: \" + $('InitiateOld').first().json.body.question\n  }\n] }}"
            },
            {
              "name": "max_tokens",
              "value": 100
            },
            {
              "name": "temperature",
              "value": 0.1
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        32,
        96
      ],
      "id": "e5418a9e-cb75-4b4a-803a-456b0cf342bf",
      "name": "Search Query Optimizer",
      "credentials": {
        "openAiApi": {
          "id": "OPENAI_CREDENTIAL_ID",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "search-query-1",
              "name": "searchQuery",
              "value": "={{ $json.choices[0].message.content.trim() }}",
              "type": "string"
            },
            {
              "id": "search-query-2",
              "name": "questionType",
              "value": "={{ $('InitiateOld').item.json.body.type }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        256,
        96
      ],
      "id": "718e118d-0425-48bb-865b-65cbd18ce277",
      "name": "Search Query Prep"
    },
    {
      "parameters": {
        "url": "=https://www.servicenow.com/community/s/plugins/custom/servicenow/servicenow/sn.search-ais-ep-settings-config",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ $json.searchQuery }}"
            },
            {
              "name": "filters",
              "value": "[{\"label\":\"Sources\",\"value\":\"Knowledge Articles\"}]"
            },
            {
              "name": "sourcers",
              "value": "[\"eddd7b40976d9e10145979c11153af54\"]"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        480,
        -96
      ],
      "id": "ac675743-c523-446d-a51e-6f23acf84e0b",
      "name": "ServiceNow KB Search"
    },
    {
      "parameters": {
        "url": "=https://www.servicenow.com/community/s/plugins/custom/servicenow/servicenow/sn.search-ais-ep-settings-config",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ $json.searchQuery }}"
            },
            {
              "name": "filters",
              "value": "[{\"label\":\"Sources\",\"value\":\"Developer Program\"},{\"label\":\"Release\",\"value\":\"Yokohama\"}]"
            },
            {
              "name": "sourcers",
              "value": "[\"f36dbb00976d9e10145979c11153af8d\",\"b86dff00976d9e10145979c11153afda\",\"7d6cebc897e99e10145979c11153afe3\",\"dacdfb40976d9e10145979c11153aff8\"]"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        480,
        96
      ],
      "id": "539bd10f-afc6-4ea8-91b3-839396b4f1bf",
      "name": "Developer Portal Search"
    },
    {
      "parameters": {
        "url": "https://www.servicenow.com/community/s/plugins/custom/servicenow/servicenow/sn.search-ais-ep-settings-config",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ $json.searchQuery }}"
            },
            {
              "name": "filters",
              "value": "[{\"label\":\"Sources\",\"value\":\"Community\"}]"
            },
            {
              "name": "sourcers",
              "value": "[\"community_articles\",\"community_discussions\"]"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        480,
        320
      ],
      "id": "57fd33d1-cbec-46bc-9043-f28b4a578753",
      "name": "Community Search"
    },
    {
      "parameters": {
        "url": "https://store.servicenow.com/sn_appstore_store.do#search",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ $json.searchQuery }}"
            },
            {
              "name": "category",
              "value": "all"
            },
            {
              "name": "sort",
              "value": "relevance"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        480,
        544
      ],
      "id": "ececd4ed-5926-4a56-8e5c-89e24b597ef5",
      "name": "ServiceNow Store Search"
    },
    {
      "parameters": {
        "numberInputs": 4
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        704,
        48
      ],
      "id": "68613b18-8d2b-4087-a7a3-1edb17afc5a1",
      "name": "Search Results Collector"
    },
    {
      "parameters": {
        "jsCode": "// Process and extract key information from all merged search results\n  const results = [];\n  const sourceNames = ['ServiceNow Knowledge Base', 'Developer Portal', 'Documentation', 'Community', 'ServiceNow Store', 'Now Learning'];\n\n  // Process each search result item\n  for (let i = 0; i < $input.all().length; i++) {\n    const item = $input.all()[i];\n    if (item.json) {\n      const sourceName = sourceNames[i] || `Source ${i + 1}`;\n\n      // Handle ServiceNow KB and Developer Portal API responses\n      if (item.json.search_content && item.json.search_content.result && item.json.search_content.result.searchResults) {\n        for(let j = 0; j < Math.min(item.json.search_content.result.count, 3); j++) {\n          const searchResult = item.json.search_content.result.searchResults[j];\n          if (searchResult && searchResult.columns && searchResult.columns[1] && searchResult.columns[4]) {\n            results.push({\n              source: sourceName,\n              content: extractContent(searchResult.columns[1].value, sourceName.toLowerCase().replace(' ', '_')),\n              url: searchResult.columns[4].value\n            });\n          } else {\n            // Fallback if columns structure is different\n            results.push({\n              source: sourceName,\n              content: `Content from ${sourceName} - ${JSON.stringify(searchResult).substring(0, 100)}...`,\n              url: ''\n            });\n          }\n        }\n      }\n      // Handle Documentation search responses\n      else if (sourceName === 'Documentation' && item.json.body) {\n        results.push({\n          source: sourceName,\n          content: extractDocumentationContent(item.json.body),\n          url: item.json.url || 'https://docs.servicenow.com'\n        });\n      }\n      // Handle Community search responses\n      else if (sourceName === 'Community' && item.json.search_content) {\n        results.push({\n          source: sourceName,\n          content: extractCommunityContent(item.json),\n          url: item.json.url || 'https://www.servicenow.com/community'\n        });\n      }\n      // Handle Store search responses\n      else if (sourceName === 'ServiceNow Store' && item.json) {\n        results.push({\n          source: sourceName,\n          content: extractStoreContent(item.json),\n          url: item.json.url || 'https://store.servicenow.com'\n        });\n      }\n      // Handle Now Learning search responses\n      else if (sourceName === 'Now Learning' && item.json) {\n        results.push({\n          source: sourceName,\n          content: extractLearningContent(item.json),\n          url: item.json.url || 'https://nowlearning.service-now.com'\n        });\n      }\n      // Fallback for any other response format\n      else {\n        results.push({\n          source: sourceName,\n          content: `Content from ${sourceName} - Response format: ${JSON.stringify(item.json).substring(0, 100)}...`,\n          url: extractUrl(item.json) || ''\n        });\n      }\n    }\n  }\n\n  function extractContent(data, source) {\n    if (typeof data === 'string') {\n      const cleanText = data.replace(/<[^>]*>/g, '').replace(/\\s+/g, ' ').trim();\n      return cleanText.substring(0, 200);\n    }\n\n    if (data && data.results && Array.isArray(data.results)) {\n      return data.results.slice(0, 3).map(item => {\n        const title = item.title || item.name || '';\n        const desc = item.description || item.summary || item.content || '';\n        return `${title}: ${desc}`.substring(0, 150);\n      }).join('\\n');\n    }\n\n    if (data && data.items && Array.isArray(data.items)) {\n      return data.items.slice(0, 3).map(item => {\n        const title = item.title || item.name || '';\n        const desc = item.snippet || item.description || '';\n        return `${title}: ${desc}`.substring(0, 150);\n      }).join('\\n');\n    }\n\n    return `Content from ${source} - customize extraction based on actual API response format`;\n  }\n\n  function extractDocumentationContent(body) {\n    if (typeof body === 'string') {\n      return body.replace(/<[^>]*>/g, '').replace(/\\s+/g, ' ').trim().substring(0, 200);\n    }\n    return 'Documentation content available';\n  }\n\n  function extractCommunityContent(data) {\n    if (data.search_content && data.search_content.result && data.search_content.result.searchResults) {\n      return data.search_content.result.searchResults.slice(0, 2).map(item => {\n        if (item.columns && item.columns[1] && item.columns[1].value) {\n          const title = item.columns[1].value;\n          return title.replace(/<[^>]*>/g, '').substring(0, 100);\n        }\n        return 'Community content available';\n      }).join('\\n');\n    }\n    return 'Community discussions and articles available';\n  }\n\n  function extractStoreContent(data) {\n    if (data.results && Array.isArray(data.results)) {\n      return data.results.slice(0, 3).map(app => {\n        const name = app.name || app.title || 'ServiceNow App';\n        const desc = app.description || app.summary || '';\n        return `${name}: ${desc}`.substring(0, 120);\n      }).join('\\n');\n    }\n    return 'ServiceNow Store applications and integrations available';\n  }\n\n  function extractLearningContent(data) {\n    if (data.courses && Array.isArray(data.courses)) {\n      return data.courses.slice(0, 3).map(course => {\n        const title = course.title || course.name || 'Learning Content';\n        const desc = course.description || course.summary || '';\n        return `${title}: ${desc}`.substring(0, 120);\n      }).join('\\n');\n    }\n    return 'Now Learning courses and certifications available';\n  }\n\n  function extractUrl(data) {\n    if (data && data.url) return data.url;\n    if (data && data.link) return data.link;\n    if (data && data.results && data.results[0] && data.results[0].url) return data.results[0].url;\n    if (data && data.items && data.items[0] && data.items[0].link) return data.items[0].link;\n    return '';\n  }\n\n  return { searchResults: results };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        928,
        80
      ],
      "id": "91dbd305-69e3-4232-b47b-2cc3421cc0a3",
      "name": "Content Processor"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "gpt-4.1-nano-2025-04-14"
            },
            {
              "name": "messages",
              "value": "={{ [\n  {\n    \"role\": \"system\",\n    \"content\": \"You are a ServiceNow content summarizer. Create concise, actionable summaries of search results. Focus on key information, links, and practical guidance. Keep each source summary under 100 tokens. If you find any links / URL in the input given, they MUST be added together with the summery. The links are important.\"\n  },\n  {\n    \"role\": \"user\",\n    \"content\": \"Summarize these ServiceNow search results for the question: \\\"\" + $('InitiateOld').first().json.body.question + \"\\\"\\n\\nSearch Results:\\n\" + JSON.stringify($('Content Processor').first().json.searchResults, null, 2)\n  }\n] }}"
            },
            {
              "name": "max_tokens",
              "value": 500
            },
            {
              "name": "temperature",
              "value": 0.3
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1152,
        80
      ],
      "id": "6c9b97c1-3599-4ef8-891f-f5f198360fdc",
      "name": "Content Summarizer",
      "credentials": {
        "openAiApi": {
          "id": "OPENAI_CREDENTIAL_ID",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "enhance-prompt-1",
              "name": "prompt",
              "value": "={{ $('Generate Key').first().json.prompt }}\n\nSEARCH CONTEXT FOR YOUR RESPONSE:\n\n{{ $('Content Summarizer').first().json.choices[0].message.content }}\n\nBased on this curated information, provide your ServiceNow guidance focusing on practical implementation.\n\nRESPONSE GUIDELINES:\n- You have been provided with curated search results above (when available)\n- Focus on synthesizing and applying the provided information\n- Provide practical, actionable guidance based on the search context\n- Include URLs from the search results when referencing specific resources\n- If search context is not available, provide general ServiceNow best practices",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1376,
        80
      ],
      "id": "37eb2ab5-be35-448a-a1f1-9f534a061568",
      "name": "Prompt Enhancer"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Initiate').first().json.body.sessionId }}",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        2384,
        480
      ],
      "id": "0dfe7dd4-e284-46a7-8d8d-3cc699e001e9",
      "name": "Chat Memory",
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        2480,
        640
      ],
      "id": "3b01667c-772d-476c-a7ed-134fa19b2b43",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "OPENAI_CREDENTIAL_ID",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "69ed723c-3456-4b43-8162-b12916afbcca",
              "leftValue": "={{ $('Initiate').item.json.body.searching }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -336,
        176
      ],
      "id": "3e529d89-88bf-44a2-a9b2-260778a2ef15",
      "name": "Searchmode1"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "=attachment",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2048,
        208
      ],
      "id": "cd6ef1df-961b-4dab-beb5-961d0fc624db",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9832117c-f5e4-4f8e-a2fb-96a0f05dbdb8",
              "name": "attachment",
              "value": "={{ $('InitiateOld').item.json.body.file }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1776,
        208
      ],
      "id": "903c6608-280c-4682-b69e-153320c1a20c",
      "name": "Set attachment"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "87e4631e-8040-48d6-96e8-fb3a77444d3e",
              "leftValue": "={{ $('Initiate').item.json.body.file }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1568,
        352
      ],
      "id": "e2dbb63e-8374-4676-8dd5-c5688a3fe0c1",
      "name": "File provided"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "d8f43068-431e-405b-bdbb-e7dba6862299",
        "authentication": "headerAuth",
        "responseMode": "streaming",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -1744,
        272
      ],
      "id": "f524b713-9471-4567-a856-7703d2a5e346",
      "name": "Initiate",
      "webhookId": "e7ff8ec4-501c-498c-8e18-b6b0fcb3786f",
      "credentials": {
        "httpHeaderAuth": {
          "id": "HEADER_AUTH_CREDENTIAL_ID",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"message\": \"unsupported type\"\n}",
        "options": {
          "responseCode": 400
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -1072,
        656
      ],
      "id": "8dec66bf-09a5-44d3-97ad-352767a6f7d3",
      "name": "Error Response"
    },
    {
      "parameters": {
        "toolDescription": "Creates ServiceNow Business Rules for server-side automation triggered by database operations (insert, update, delete, query). Use when the solution requires modifying record data before saving, updating related records after commit, server-side calculations, or any logic that must execute on the server when records change. Handles proper timing (before/after/async) and follows ServiceNow best practices to avoid recursion and performance issues.\n\nUse for: Server-side record automation, data validation/modification, related record updates, calculations triggered by record changes.",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', `Provide a clear specification of what the Business Rule should accomplish, including:\n\nPurpose: What business logic or automation the rule should perform\nTrigger: Which table and operations (insert/update/delete) should activate the rule\nConditions: When the rule should execute (field changes, specific values, etc.)\nActions: What the rule should do (modify fields, update related records, calculations, notifications)\nContext: Any business requirements, dependencies, or constraints\n\nExample: \"Create a Business Rule on the Incident table that automatically sets Priority to 'High' when Impact is 'High' and Urgency is 'Medium' or higher, but only on insert and when the caller is a VIP user.\"\n\nThe more specific the requirements, the better the generated solution will match your needs.`, 'string') }}",
        "options": {
          "systemMessage": "You are an expert ServiceNow Business Rule development agent that generates high-quality, performance-optimized business rules following ServiceNow technical best practices. Your role is to create, analyze, and optimize business rules that are efficient, maintainable, and scalable.\n\n## Core Development Principles\n\n### Code Quality Standards\n- **Always write readable code**: Use descriptive variable and function names that clearly indicate purpose\n- **Comment your code**: Include clear, well-written comments explaining complex logic and business requirements\n- **Use proper white space**: Include empty lines and spacing to make code visually organized and readable\n- **Write simple statements**: Avoid complex ternary operators and nested logic that could confuse future developers\n- **Create modular components**: Break complex logic into small, specialized functions\n\n### Business Rule Timing and Structure\n- **Use appropriate \"When\" timing**:\n  - `before`: Update information on the current object (e.g., setting field values)\n  - `after`: Update information on related objects that need immediate display\n  - `async`: Update information on related objects that don't need immediate display\n  - `display`: Provide client-side scripts access to server-side data\n\n- **Always use conditions**: Implement proper Filter Conditions to ensure rules only run when necessary\n- **Keep code in functions**: Always wrap your code in the default function structure to prevent variable scope issues\n\n### Performance Best Practices\n\n#### Database Interactions\n- **Use GlideAggregate for counting**: Never use `getRowCount()` for counting records\n- **Avoid complex queries on large datasets**: Consider pre-computed related lists instead of real-time relationship queries\n- **Let the database do the work**: Use `setLimit(1)` when checking for existence rather than retrieving all records\n- **Use addEncodedQuery()**: For complex queries, use encoded query strings instead of multiple addQuery() calls\n\n#### Variable Management\n- **Use descriptive variable names**: `var currentUser = gs.getUserID()` instead of `var u = gs.getUserID()`\n- **Store function results**: Avoid calling the same function repeatedly with same parameters\n- **Verify values exist**: Always check if variables have values before using them\n- **Return meaningful values**: Functions should return useful information about execution success/failure\n\n### Security and Validation\n- **Prevent recursive business rules**: Never use `current.update()` in business rules\n- **Double-check critical input**: Use business rules to validate data that might change between client validation and server processing\n- **Avoid hard-coded values**: Use system properties instead of hard-coding sys_ids, group names, or other values\n\n### Code Structure Requirements\n\n#### Function Template\n```javascript\n(function executeRule(current, previous /*null when async*/) {\n    \n    // Your business logic here\n    // Always wrapped in the default function\n    \n})(current, previous);\n```\n\n#### Script Include Usage\n- For reusable functions, create Script Includes instead of global business rules\n- Use proper Script Include structure:\n```javascript\nvar YourScriptInclude = Class.create();\nYourScriptInclude.prototype = {\n    initialize: function() {\n        // Initialization code\n    },\n    \n    yourMethod: function(parameters) {\n        // Method implementation\n        return result;\n    },\n    \n    type: 'YourScriptInclude'\n};\n```\n\n### Debugging and Logging\n- **Use property-controlled debugging**:\n```javascript\nvar debug = gs.getProperty('debug.YourScript') == 'true';\nif (debug) {\n    gs.debug('Debug message: ' + variableValue);\n}\n```\n- **Prefer gs.debug() and gs.info()**: These work in both scoped and global applications\n- **Avoid gs.addInfoMessage()**: These impact user experience and should be used sparingly\n\n### Specific Coding Patterns\n\n#### Safe Value Checking\n```javascript\n// Good pattern for checking related record values\nvar table = current.cmdb_ci.installed_on.sys_class_name;\nif (table) {\n    gs.debug('Table is: ' + table);\n} else {\n    gs.debug('Warning: table is undefined');\n}\n```\n\n#### Proper Reference Field Handling\n```javascript\n// Correct - direct value access\nvar id = current.getValue('caller_id');\n\n// Incorrect - unnecessary dot-walking\nvar id = current.caller_id.sys_id;\n```\n\n#### Display Value Usage\n```javascript\n// Good - flexible approach\nvar parent = current.parent.getDisplayValue();\nvar myCI = current.cmdb_ci.getDisplayValue();\n\n// Avoid - hard-coded field names\nvar parent = current.parent.number;\nvar myCI = current.cmdb_ci.name;\n```\n\n## Code Generation Guidelines\n\nWhen generating business rules, you must:\n\n1. **Analyze the requirement** and determine the appropriate \"When\" timing\n2. **Implement proper conditions** to ensure the rule only runs when necessary\n3. **Use the standard function wrapper** with current and previous parameters\n4. **Include meaningful comments** explaining the business logic\n5. **Implement error handling** and validation where appropriate\n6. **Use performance-optimized database queries**\n7. **Follow naming conventions** for variables and functions\n8. **Consider debugging needs** and include property-controlled logging when appropriate\n\n## Example Business Rule Structure\n\n```javascript\n(function executeRule(current, previous /*null when async*/) {\n    \n    /***************************************************\n     * Business Rule: [Purpose Description]\n     * \n     * Triggers: [When this rule executes]\n     * Purpose: [What this rule accomplishes]\n     * Author: ServiceNow Business Rule Agent\n     * Date: [Current Date]\n     ***************************************************/\n    \n    // Validate required conditions\n    if (!current.field_name) {\n        gs.debug('Required field is empty, exiting rule');\n        return;\n    }\n    \n    // Main business logic\n    try {\n        // Implement the required functionality\n        performBusinessLogic();\n        \n    } catch (error) {\n        gs.error('Error in business rule: ' + error.message);\n    }\n    \n    /**\n     * Helper function to encapsulate business logic\n     */\n    function performBusinessLogic() {\n        // Implementation details\n    }\n    \n})(current, previous);\n```\n\n## Quality Checklist\n\nBefore finalizing any business rule, ensure:\n\n- [ ] Appropriate \"When\" timing selected\n- [ ] Proper conditions implemented\n- [ ] Code wrapped in default function\n- [ ] Descriptive variable names used\n- [ ] Comments explain complex logic\n- [ ] Error handling implemented\n- [ ] Performance considerations addressed\n- [ ] No hard-coded values\n- [ ] Proper database query patterns used\n- [ ] Debugging statements included where helpful\n\n## Anti-Patterns to Avoid\n\n- Never use `current.update()` in business rules\n- Don't create global business rules for specific functionality\n- Avoid hard-coding sys_ids or names\n- Don't use `getRowCount()` for counting\n- Avoid dot-walking to sys_id of reference fields\n- Don't use `eval()` function\n- Avoid DOM manipulation in business rules\n- Don't leave debugging statements in production code without property controls\n\n## Response Format\n\nWhen generating business rules, provide:\n\n1. **Complete business rule code** with proper structure\n2. **Condition statement** for the \"When to run\" section\n3. **Explanation** of the business logic and implementation decisions\n4. **Performance considerations** and optimizations applied\n5. **Testing recommendations** for validation\n\n## Tools\nUse the Date tool to get the current date.\n\nRemember: Your generated business rules should be production-ready, following all ServiceNow best practices for performance, maintainability, and scalability."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        2800,
        480
      ],
      "id": "7b8652a2-17f1-4c71-be16-895ad6b7f751",
      "name": "Business Rule Agent"
    },
    {
      "parameters": {
        "toolDescription": "Creates ServiceNow Client Scripts for client-side automation triggered by form events (onLoad, onChange, onSubmit, onCellEdit). Use when the solution requires real-time form behavior, field validation before submission, dynamic UI changes, or user experience enhancements that must execute in the browser. Handles proper script types (onLoad/onChange/onSubmit/onCellEdit) and follows ServiceNow best practices for performance and user experience.\n\nUse for: Form field validation, dynamic field behavior, UI/UX enhancements, real-time form interactions triggered by user actions.",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', `Provide a clear specification of what the Client Script should accomplish, including:\nPurpose: What user interface behavior or form interaction the script should enable\nTrigger: Which form/table and events (onLoad/onChange/onSubmit/onCellEdit) should activate the script\n\nConditions: When the script should execute (specific field changes, field values, user roles, etc.)\nActions: What the script should do (show/hide fields, set field values, display messages, validate input, make UI changes)\n\nContext: Any user experience requirements, business rules, or UI constraints\nExample: 'Create an onChange Client Script on the Incident form that hides the Resolution fields when State is not Resolved or Closed, shows a warning message if Priority is set to Critical without proper justification in the Description field, and makes Assignment Group mandatory when State changes to In Progress.'\n\nThe more specific the requirements about user interactions and form behavior, the better the generated solution will match your needs.`, 'string') }}",
        "options": {
          "systemMessage": "You are an expert ServiceNow Client Script developer. Your role is to create high-quality, efficient, and maintainable Client Scripts that follow ServiceNow best practices. Always prioritize user experience, performance, and code maintainability.\n\n## Core Principles\n\n### 1. Function Encapsulation\n- **ALWAYS** wrap your code in the appropriate function (onLoad, onChange, onSubmit, onCellEdit)\n- **NEVER** use global variables outside functions to prevent variable scope conflicts\n- Use proper function parameters: `(control, oldValue, newValue, isLoading, isTemplate)` for onChange scripts\n\n### 2. Performance Optimization\n- **Check isLoading first** in onChange scripts to prevent unnecessary execution during form load:\n  ```javascript\n  if (isLoading) return;\n  ```\n- **Validate newValue exists** before processing:\n  ```javascript\n  if (newValue) { /* your logic */ }\n  ```\n- **Add newValue != oldValue check** to ensure the script only runs when values actually change\n- **Minimize server lookups** - use client-side data when possible\n- **Bury server calls** deep in conditional logic to avoid unnecessary round trips\n\n### 3. Server Communication Best Practices\n- **Use g_scratchpad** for server-to-client data transfer when the information is known at form load\n- **Use asynchronous GlideAjax** for dynamic server lookups - NEVER use synchronous calls\n- **Include display values** when using setValue() on reference fields:\n  ```javascript\n  g_form.setValue('field_name', sys_id, display_value);\n  ```\n- **Avoid g_form.getReference()** - use GlideAjax instead for better performance\n\n### 4. Code Structure and Readability\n- Use **descriptive variable and function names**\n- Add **meaningful comments** that explain the business logic, not just the code\n- Use **proper indentation and white space** for readability\n- **Avoid complex ternary operators** - use clear if/else statements instead\n- Store function results in variables to avoid repeated calls\n\n### 5. Validation and Error Handling\n- Use Client Scripts primarily for **data validation** and **user experience enhancement**\n- Provide immediate feedback with `g_form.showErrorBox()` for validation errors\n- Verify values exist before using them to prevent undefined errors\n- Use **UI Policies instead of Client Scripts** when possible for field attribute changes\n\n## Required Script Structure\n\n### onChange Script Template:\n```javascript\nfunction onChange(control, oldValue, newValue, isLoading, isTemplate) {\n    // Always check isLoading first\n    if (isLoading) return;\n    \n    // Validate newValue exists\n    if (newValue) {\n        // Check if value actually changed\n        if (newValue != oldValue) {\n            // Check client-side conditions first\n            if (/* client-side validation */) {\n                // Only then make server calls if absolutely necessary\n                var ga = new GlideAjax('ScriptIncludeName');\n                ga.addParam('sysparm_name', 'methodName');\n                ga.addParam('sysparm_parameter', newValue);\n                ga.getXML(callbackFunction);\n            }\n        }\n    }\n}\n\nfunction callbackFunction(response) {\n    var answer = response.responseXML.documentElement.getAttribute(\"answer\");\n    // Process response\n}\n```\n\n### onLoad Script Template:\n```javascript\nfunction onLoad() {\n    // Use g_scratchpad data when available\n    if (typeof g_scratchpad.propertyName !== 'undefined') {\n        // Process server data sent via g_scratchpad\n    }\n    \n    // Set initial form state\n    // Perform client-side setup\n}\n```\n\n### onSubmit Script Template:\n```javascript\nfunction onSubmit() {\n    // Perform final validation before submission\n    if (/* validation condition */) {\n        g_form.showErrorBox('field_name', 'Error message');\n        return false; // Prevent submission\n    }\n    return true; // Allow submission\n}\n```\n\n## Practices to AVOID\n\n- **NEVER** create global Client Scripts (table = Global)\n- **NEVER** use DOM manipulation unless absolutely necessary\n- **NEVER** use alert() statements - use g_form methods instead\n- **NEVER** use synchronous server calls (getXMLWait)\n- **NEVER** use gs.log() or similar server-side functions in client scripts\n- **NEVER** hardcode sys_ids or other instance-specific values\n- **NEVER** leave variables unenclosed outside functions\n\n## Additional Requirements\n\n### Script Ordering:\n- Set appropriate Order values when multiple scripts exist on the same table\n- Lower numbers execute first (100 before 300)\n\n### Client-Server Integration:\n- Use display Business Rules with g_scratchpad for efficient server-to-client data transfer\n- Create corresponding Script Includes for GlideAjax server-side processing\n- Follow proper GlideAjax patterns with error handling\n\n### Form Enhancement Guidelines:\n- Use Client Scripts for dynamic field behavior and real-time validation\n- Implement proper user feedback mechanisms\n- Ensure scripts work correctly during both form load and user interaction\n- Consider the impact on list editing vs. form editing\n\n### Debugging Support:\n- Include jslog() statements for client-side debugging when needed\n- Use meaningful debug messages that help identify issues\n- Remove or comment out debug statements before production deployment\n\n## Code Quality Standards\n\n1. **Always** include proper error handling\n2. **Always** validate input parameters\n3. **Always** use consistent naming conventions\n4. **Always** follow the performance optimization checklist\n5. **Always** test both form load and user interaction scenarios\n6. **Always** consider the user experience impact\n\nWhen generating Client Scripts, ensure they are production-ready, well-documented, and follow these established best practices for optimal performance and maintainability."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        3088,
        480
      ],
      "id": "e640cb25-c58e-4112-90b6-beb2c441e288",
      "name": "Client Script Agent"
    },
    {
      "parameters": {
        "description": "Use this tool to analyze ServiceNow requirements and plan solutions. It provides a structured thinking space to verify policies, break down complex tasks, and validate approaches before generating scripts or configurations. Use when you need to carefully process ServiceNow data, follow development guidelines, or plan multi-step implementations."
      },
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        3376,
        480
      ],
      "id": "06d0f101-6442-487f-b5d1-1ce9b85d0051",
      "name": "Think"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.dateTimeTool",
      "typeVersion": 2,
      "position": [
        2960,
        656
      ],
      "id": "1e4c5797-8b07-4f4d-9f56-9da5ae71906d",
      "name": "Date Tool"
    },
    {
      "parameters": {
        "model": "={{ $('Initiate').first().json.body.aiModel }}",
        "options": {
          "frequencyPenalty": 0.2,
          "presencePenalty": 0.1,
          "temperature": 0.1,
          "topP": 0.9
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        2768,
        656
      ],
      "id": "4e2de69a-7b1c-4e5e-8240-96669b22ea1d",
      "name": "Business Rule Model",
      "credentials": {
        "openRouterApi": {
          "id": "OPENROUTER_CREDENTIAL_ID",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "model": "={{ $('Initiate').first().json.body.aiModel }}",
        "options": {
          "frequencyPenalty": 0.2,
          "presencePenalty": 0.1,
          "temperature": 0.1,
          "topP": 0.9
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        3104,
        656
      ],
      "id": "d7a06558-397d-4860-a7bd-ca0cffca4891",
      "name": "Client Script Model",
      "credentials": {
        "openRouterApi": {
          "id": "OPENROUTER_CREDENTIAL_ID",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "model": "={{ $('Initiate').first().json.body.aiModel }}",
        "options": {
          "maxTokens": "={{ $('Generate Key').first().json.max_tokens }}",
          "temperature": "={{ $('Generate Key').first().json.temperature }}",
          "topP": "={{ $('Generate Key').first().json.top_p }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        2224,
        480
      ],
      "id": "4a369593-e98f-4d5a-b0b0-3f959d5ead8c",
      "name": "Orchestration Model",
      "credentials": {
        "openRouterApi": {
          "id": "OPENROUTER_CREDENTIAL_ID",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Question from the user: \"{{ $('Initiate').first().json.body.chatInput }}\"",
        "options": {
          "systemMessage": "={{ $('File provided').item.json.prompt }}",
          "enableStreaming": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2672,
        256
      ],
      "id": "08970e69-f5ff-48a1-9354-ef7078f3f6f2",
      "name": "Orchestration Agent"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "Searches a knowledge base of previously saved question-and-answer pairs. This tool is designed to retrieve useful answers based on past user queries.\nUse this tool by inputting a question. If similar questions have been asked before, it will return the most relevant answers previously marked as helpful.\n\nInput:\nA natural language question from the user.\n\nOutput:\nOne or more relevant answers from the knowledge base, if any similar questions are found.\n\nExample usage:\nInput: \"How do I reset my database password?\"\nOutput: \"To reset your database password, go to the admin panel, select 'Security', then choose 'Reset Password'.\"",
        "tableName": "qa_knowledge_base",
        "options": {
          "columnNames": {
            "values": {
              "vectorColumnName": "question_embedding",
              "contentColumnName": "answer"
            }
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1.3,
      "position": [
        2512,
        480
      ],
      "id": "4fda1e6e-dbe6-404c-9763-402182067b2b",
      "name": "Knowledge Store",
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Switch": {
      "main": [
        [
          {
            "node": "Append Recommendation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Append Documentation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Append Script",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Append Troubleshoot",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append Recommendation": {
      "main": [
        [
          {
            "node": "Generate Key",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append Documentation": {
      "main": [
        [
          {
            "node": "Generate Key",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append Script": {
      "main": [
        [
          {
            "node": "Generate Key",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Key": {
      "main": [
        [
          {
            "node": "Create Work Record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Basic Variables": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Work Record": {
      "main": [
        [
          {
            "node": "Searchmode1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append Troubleshoot": {
      "main": [
        [
          {
            "node": "Generate Key",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add QA Pair Webhook": {
      "main": [
        [
          {
            "node": "Extract QA Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract QA Data": {
      "main": [
        [
          {
            "node": "Generate Question Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Question Embedding": {
      "main": [
        [
          {
            "node": "Generate Answer Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Answer Embedding": {
      "main": [
        [
          {
            "node": "Combine Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Data": {
      "main": [
        [
          {
            "node": "Save to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Database": {
      "main": [
        [
          {
            "node": "Success embedding response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Query Optimizer": {
      "main": [
        [
          {
            "node": "Search Query Prep",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Query Prep": {
      "main": [
        [
          {
            "node": "ServiceNow KB Search",
            "type": "main",
            "index": 0
          },
          {
            "node": "Developer Portal Search",
            "type": "main",
            "index": 0
          },
          {
            "node": "Community Search",
            "type": "main",
            "index": 0
          },
          {
            "node": "ServiceNow Store Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ServiceNow KB Search": {
      "main": [
        [
          {
            "node": "Search Results Collector",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Developer Portal Search": {
      "main": [
        [
          {
            "node": "Search Results Collector",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Community Search": {
      "main": [
        [
          {
            "node": "Search Results Collector",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "ServiceNow Store Search": {
      "main": [
        [
          {
            "node": "Search Results Collector",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Search Results Collector": {
      "main": [
        [
          {
            "node": "Content Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Content Processor": {
      "main": [
        [
          {
            "node": "Content Summarizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Content Summarizer": {
      "main": [
        [
          {
            "node": "Prompt Enhancer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prompt Enhancer": {
      "main": [
        [
          {
            "node": "File provided",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Orchestration Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Knowledge Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Searchmode1": {
      "main": [
        [
          {
            "node": "Search Query Optimizer",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File provided",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Orchestration Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set attachment": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File provided": {
      "main": [
        [
          {
            "node": "Set attachment",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Orchestration Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initiate": {
      "main": [
        [
          {
            "node": "Set Basic Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Business Rule Agent": {
      "ai_tool": [
        [
          {
            "node": "Orchestration Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Client Script Agent": {
      "ai_tool": [
        [
          {
            "node": "Orchestration Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "Orchestration Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Date Tool": {
      "ai_tool": [
        [
          {
            "node": "Business Rule Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Business Rule Model": {
      "ai_languageModel": [
        [
          {
            "node": "Business Rule Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Client Script Model": {
      "ai_languageModel": [
        [
          {
            "node": "Client Script Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Orchestration Model": {
      "ai_languageModel": [
        [
          {
            "node": "Orchestration Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Orchestration Agent": {
      "main": [
        [
          {
            "node": "Save response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Knowledge Store": {
      "ai_tool": [
        [
          {
            "node": "Orchestration Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "6737700e-4334-4cd8-b8f2-d2e1456c9f3f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2922ffa1ef3847c08fbec786aa30ef6b2d15e0a8f91aca722c38778733c92fae"
  },
  "id": "6EnYTxZp6bFEnYW7",
  "tags": []
}