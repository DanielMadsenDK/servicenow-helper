import { NextRequest, NextResponse } from 'next/server';
import { getServerAuthState } from '@/lib/server-auth';
import { cancelPollingOperation } from '@/lib/polling-manager';
import { markSessionCancelled } from '@/lib/polling-store';

export async function POST(request: NextRequest) {
  try {
    const { isAuthenticated } = await getServerAuthState();
    if (!isAuthenticated) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const { sessionkey } = await request.json();

    if (!sessionkey || typeof sessionkey !== 'string') {
      return NextResponse.json(
        { success: false, error: 'Valid session key required' },
        { status: 400 }
      );
    }

    // Validate session key format (should match the format generated by SearchInterface)
    if (!/^session_\d+_[a-z0-9]+$/.test(sessionkey)) {
      return NextResponse.json(
        { success: false, error: 'Invalid session key format' },
        { status: 400 }
      );
    }

    // Mark session as cancelled in filesystem (works across module instances)
    markSessionCancelled(sessionkey);
    
    // Also try to cancel via polling manager (if in same instance)
    cancelPollingOperation(sessionkey);
    
    return NextResponse.json({
      success: true,
      message: 'Request cancelled successfully'
    });
  } catch (error) {
    console.error('Cancel request error:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to cancel request' },
      { status: 500 }
    );
  }
}
